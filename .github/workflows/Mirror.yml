name: Repository mirroring

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
        - '**'

jobs:

  linter_code:
    name: Linter code
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged != true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install clang-format
        run: sudo apt-get install -y clang-format

      - name: Linter code
        run: |
          echo "JE SUIS UN LINTER"
          echo "origin: ${{ github.ref }}"

      - name: Run formmater.sh
        run: |
          chmod +x ./formatter.sh
          ./formatter.sh

      - name: Check if code is formatted
        shell: bash
        run: |
          git diff --exit-code
          Status=$?

          if [ $Status -eq 0 ]; then
            echo "Code is formatted"
          else
            echo "Code is not formatted"
            exit 1
          fi

  check_program_compilation_linux:
    needs: [linter_code]
    runs-on: ubuntu-latest
    # container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Install Dependencies for Linux
        run: sudo apt-get install -y libc-dev libstdc++-6-dev
      
      - name: Create binary folder
        run: mkdir -p ./binary
      
      - name: Configure and build with CMake
        run: |
          cmake -B build
          cmake --build build
      
      - name: Copy binary
        run: |
          cp ./build/r-type_server ./binary
          cp ./build/r-type_client ./binary

      - uses: actions/upload-artifact@v2
        with:
          name: linux-binary
          path: ./binary

  check_program_compilation_windows:
    needs: [linter_code]
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create Windows folder
        run: mkdir -p ./windows

      - name: Install CMake
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          
      - name: Configure and build with CMake
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build .
          cd ..

      - name: Copy binary
        run: |
          cp ./build/Debug/r-type_server.exe ./windows

      - uses: actions/upload-artifact@v2
        with:
          name: windows-binary
          path: ./windows
      
  
  create_release:
    needs: [check_program_compilation_linux, check_program_compilation_windows]
    name: Create release
    runs-on: ubuntu-latest
    # if: github.event.pull_request.merged == true || github.event_name == 'push'
    permissions:
      contents: write
    env:
      CURRENT_DATE: $(date +'%Y%m%d')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v2
        with:
          name: linux-binary
          path: ./binary

      - uses: actions/download-artifact@v2
        with:
          name: windows-binary
          path: ./windows

      - name: Get current date
        run: echo "CURRENT_DATE=$(date +'%Y-%m-%d.%Hh%Mm%Ss')" >> $GITHUB_ENV

      - name: Display current date
        run: echo $CURRENT_DATE

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Latest.Version.${{ env.CURRENT_DATE }}
          release_name: Latest.Version.${{ env.CURRENT_DATE }}
          draft: false
          prerelease: false

      - name: Upload r-type_server binary Linux
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./binary/r-type_server
          asset_name: r-type_server
          asset_content_type: application/octet-stream

      - name: Upload r-type_server binary Windows
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./windows/r-type_server.exe
          asset_name: r-type_server.exe
          asset_content_type: application/octet-stream

  push_to_mirror:
    needs: [create_release]
    name: Push repository to mirror
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Repository mirroring
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ secrets.MIRROR_URL }}
          ssh_private_key: ${{ secrets.CLONE_KEY }}