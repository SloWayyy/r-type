Kevin Nadarajah                                                 Epitech Paris
Jonathan Yakan
Mehdi Djendar
Taha Alani
Rayan Es-Seffar
Epitech
Decembre 2023

                            R-Type Protocols

(CREATED ON: 12/18/2023.)

Status of this Memo

    This memo is the official documentation of the R-Type UDP Protocols.
    The R-Type is a third year project from EPITECH.

Table of Contents

    1. Introduction
    2. R-Type architecture
    3. Protocol
        1. Packets
        2. Player Events
        3. Packet Type


1   .Introduction

    The goal of this project is to create an 4-multiplayer game.

2.  R-Type architecture

    The R-Type architecture is a client-server game architecture.
    A client connects at the start to the server by using the Protocol.
    And then Spawn in a game.

3.  Protocol

    1. Packets

    When the Player is in the game, the client-server communications are done
    by using this R-Type UDP Protocol.
    The UDP Protocol is used to transmit to all clients when an ENTITY has been updated.

    In order to communicate with the server/client, we MUST follow the following
    Packet containing this 7 datas:

        uint32_t MAGIC_NUMBER;
        PacketType PACKET_TYPE;
        long TIMESTAMP;
        uint32_t ENTITY_ID;
        uint32_t TYPE_INDEX;
        std::array<char, 37> UUID;
        T component;

    where "MAGIC_NUMBER" is a 4-byte to know if the Packet is correct, "PACKET_TYPE" is
    a 1-byte an element of the PacketType enumeration (described below) representation
    the type of Packet, "TIMESTAMP" is the time when the Packet was sent, "ENTITY_ID" is
    the data to know which player sent the Packet, "TYPE_INDEX" is to know which
    component has been updated of the ENTITY_ID, "UUID" is the unique generated for detecting
    a particul packet.

    The PacketType enumeration:

    enum PacketType {
        DATA_PACKET = '0',
        REPEAT_PACKET = '1',
        RESPONSE_PACKET = '2',
        NEW_CONNECTION = '3',
    };

    To send a Packet, you MUST write the data on UDP socket in this order :
    MAGIC_NUMBER, PACKET_TYPE, TIMESTAMP, ENTITY_ID, TYPE_INDEX, UUID;

    To received a Packet you MUST read the 4 first bytes (corresponding to the 
    MAGIC_NUMBER data), read the 1 following byte (corresponding to the
    PACKET_TYPE), read the 8 following bytes (corresponding to the TIMESTAMP),
    read the 4 following bytes (corresponding to the ENTITY_ID), read the 4 
    following bytes (corresponding to the ENTITY_ID) and finally read the 37 
    last bytes (corresponding to the UUID).
    
    2. Player Events

        The player, on the client-side, can execute several actions.
        On each action, the client MUST send to the server:

        For example:

        Player 1 move UP

        He sends the following packet:

            {
                MAGIC_NUMBER = 45678
                PACKET_TYPE = DATA_PACKET
                long TIMESTAMP = time is sent
                ENTITY_ID = 1
                TYPE_INDEX = typeid to to read the component
                UUID = "eyzue1tuyzuyezyizyezyeieiye"
                T component;
            }

        then the server sends to allClient the query if it is correct
        if not the server sends nothing back.

    3. Packet TYPE

        In order, to specify each packet we need to specify a PACKET_TYPE in the header.

        The client sends to server the packet to notify that a component of the player
        changed.
                    OR
        The server sends to all clients the packet to notify that a component of a
        player changed.

        We have to send the packet containing: 

            PACKET_TYPE = DATA_PACKET

        The server sends, in a laps of 200ms, the same packet if the client does not
        receive it.

        In order to know if the client received it, the client MUST respond when he
        receives.

        The clients have to send the packet containing:

            PACKET_TYPE = RESPONSE_PACKET 

        Until the server does not receive it will receive in loop the packet.
        With the following header:

            PACKET_TYPE = REPEAT_PACKET


                            R-Type Protocols
